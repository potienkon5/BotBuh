import telebot
import stripe
import threading
import time
import sqlite3
from datetime import datetime, timedelta
from flask import Flask, request, jsonify

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ –±–æ—Ç–∞
app = Flask(__name__)
bot = telebot.TeleBot('7866110241:AAEMk7X2Kkr-TKhoB1QrdL2UBfCCfN8mHMY')
stripe.api_key = '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'

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect('users.db', check_same_thread=False)
cursor = conn.cursor()
cursor.execute('DROP TABLE IF EXISTS users')
cursor.execute('''CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    phone_number TEXT,
    expiration TEXT
)''')
cursor.execute("PRAGMA table_info(users)")
print(cursor.fetchall())
conn.commit()

admin_id = 920716848  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —á–∏—Å–ª–æ–≤–æ–π ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
admin_id2 = 951610426
CHANNEL_ID = "-1001709871902"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ chat_id –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞

PRICES = {1: 2, 6: 10, 12: 20}  # –¶–µ–Ω—ã –ø–æ–¥–ø–∏—Å–æ–∫

@app.route('/stripe_webhook', methods=['POST'])
def stripe_webhook():
    payload = request.get_data(as_text=True)
    sig_header = request.headers.get('Stripe-Signature')
    endpoint_secret = 'whsec_z9DPMCBDw5GazR6nk8KMw8VV97hjtg12'
    try:
        event = stripe.Webhook.construct_event(payload, sig_header, endpoint_secret)
    except (ValueError, stripe.error.SignatureVerificationError) as e:
        print(f"Webhook error: {e}")
        return 'Error', 400

    if event['type'] == 'checkout.session.completed':
        session = event['data']['object']
        user_id = int(session['metadata']['user_id'])
        duration = float(session['metadata']['duration'])
        expiration_date = datetime.now() + (timedelta(minutes=3) if duration == 0.002083 else timedelta(days=30 * duration))
        
        cursor.execute('UPDATE users SET expiration = ? WHERE user_id = ?', (expiration_date.isoformat(), user_id))
        conn.commit()

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–∑ –±–∞–∑—ã
        cursor.execute('SELECT phone_number FROM users WHERE user_id = ?', (user_id,))
        phone_result = cursor.fetchone()
        phone_number = phone_result[0] if phone_result else "–Ω–µ —É–∫–∞–∑–∞–Ω"

         # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∞–¥–º–∏–Ω–∞
        message = f"–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–∞! –í—ã –ø–æ–ª—É—á–∏–ª–∏ –¥–æ—Å—Ç—É–ø –Ω–∞ {int(duration * 30)} –º–µ—Å—è—Ü(–µ–≤)." if duration != 0.002083 else "–í—ã –ø–æ–ª—É—á–∏–ª–∏ —Ç–µ—Å—Ç –¥–æ—Å—Ç—É–ø –Ω–∞ 3 –º–∏–Ω—É—Ç."
        bot.send_message(user_id, message)
        user_info = bot.get_chat(user_id)
        username = user_info.username or f"user?id={user_id}"
        admin_message = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –Ω–æ–º–µ—Ä–æ–º +{phone_number} –æ–ø–ª–∞—Ç–∏–ª –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ {int(duration * 30) if duration != 0.002083 else '—Ç–µ—Å—Ç 3 –º–∏–Ω—É—Ç'}."
        bot.send_message(admin_id, admin_id2, admin_message)

        if duration == 0.002083:
            threading.Thread(target=remove_user_after_timeout, args=(user_id, 60)).start()

    return jsonify(success=True), 200

@bot.message_handler(commands=['start'])
def start_command(message):
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    phone_button = telebot.types.KeyboardButton("–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)
    markup.add(phone_button)
    bot.send_message(message.chat.id, """
–ü—Ä–∏–≤–µ—Çüëãüèª

–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ç–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª—É: "–ë—É—Ö–≥–∞–ª—Ç–µ—Ä –≤ –ì–µ—Ä–º–∞–Ω–∏–∏"üá©üá™ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–Ω–µ—Å—Ç–∏ –æ–ø–ª–∞—Ç—É.

–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ–¥–ø–∏—Å–∫–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞.                        
                     """, reply_markup=markup)

@bot.message_handler(content_types=['contact'])
def handle_contact(message):
    if message.contact:
        phone_number = message.contact.phone_number
        user_id = message.from_user.id

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        cursor.execute('INSERT OR REPLACE INTO users (user_id, phone_number, expiration) VALUES (?, ?, ?)',
                       (user_id, phone_number, None))
        conn.commit()

        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É –ø–æ–¥–ø–∏—Å–∫–∏
        markup = telebot.types.InlineKeyboardMarkup()
        markup.add(telebot.types.InlineKeyboardButton("–û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="subscribe"))
        bot.send_message(
            message.chat.id,
            "–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–¥–ø–∏—Å–∫–∏.",
            reply_markup=markup
        )
    else:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞'.")

@bot.callback_query_handler(func=lambda call: call.data == "subscribe")
def subscribe_command(call):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = call.message.chat.id
    cursor.execute('SELECT phone_number FROM users WHERE user_id = ?', (user_id,))
    result = cursor.fetchone()

    if result and result[0]:  # –ï—Å–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        markup = telebot.types.InlineKeyboardMarkup()
        markup.add(telebot.types.InlineKeyboardButton("1 –º–µ—Å—è—Ü (2 –µ–≤—Ä–æ)", callback_data="1"))
        markup.add(telebot.types.InlineKeyboardButton("6 –º–µ—Å—è—Ü–µ–≤ (10 –µ–≤—Ä–æ)", callback_data="6"))
        markup.add(telebot.types.InlineKeyboardButton("1 –≥–æ–¥ (20 –µ–≤—Ä–æ)", callback_data="12"))
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏:", reply_markup=markup)
    else:
        bot.send_message(
            user_id,
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ù–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ."
        )

@bot.callback_query_handler(func=lambda call: call.data in ["1", "6", "12"])
def payment_process(call):
    duration = float(call.data)
    price = PRICES[duration]
    user_id = call.message.chat.id

    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ Stripe
    session = stripe.checkout.Session.create(
        payment_method_types=['card'],
        line_items=[{
            'price_data': {
                'currency': 'eur',
                'product_data': {'name': f'–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {int(duration * 30) if duration != 0.002083 else 1} {("3 –º–∏–Ω—É—Ç" if duration == 0.002083 else "–º–µ—Å—è—Ü(–µ–≤)")}'},
                'unit_amount': int(price * 100),
            },
            'quantity': 1,
        }],
        mode='payment',
        success_url='https://t.me/+nF4uweCl7aVhMWQy',
        cancel_url='https://t.me/pay_chanel_bot',
        metadata={'user_id': user_id, 'duration': duration}
    )

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–Ω–æ–π –æ–ø–ª–∞—Ç—ã
    pending_payments[user_id] = {'session_id': session.id, 'start_time': time.time()}

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –æ–ø–ª–∞—Ç—ã
    markup = telebot.types.InlineKeyboardMarkup()
    markup.add(telebot.types.InlineKeyboardButton("–û–ø–ª–∞—Ç–∏—Ç—å", url=session.url))
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã.", reply_markup=markup)

    # –¢–∞–π–º–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã
    threading.Thread(target=check_payment_status, args=(user_id,)).start()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–µ–π
pending_payments = {}

def check_payment_status(user_id):
    # –û–∂–∏–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, 5 –º–∏–Ω—É—Ç)
    time.sleep(350000)  # 150 —Å–µ–∫—É–Ω–¥ = 2,5 –º–∏–Ω—É—Ç—ã

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –æ—Å—Ç–∞–ª–∞—Å—å –ª–∏ –∑–∞–ø–∏—Å—å –≤ `pending_payments`
    if user_id in pending_payments:
        session_id = pending_payments[user_id]['session_id']
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Å—Å–∏–∏ –≤ Stripe
        try:
            session = stripe.checkout.Session.retrieve(session_id)
            if session.payment_status == 'paid':
                # –ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ –∑–∞–≤–µ—Ä—à–µ–Ω, —É–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏ –≤—ã—Ö–æ–¥–∏–º
                print(f"–ü–ª–∞—Ç–µ–∂ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∑–∞–≤–µ—Ä—à–µ–Ω.")
                del pending_payments[user_id]
                return
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã –≤ Stripe: {e}")

        # –ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        markup = telebot.types.InlineKeyboardMarkup()
        markup.add(telebot.types.InlineKeyboardButton("–û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="subscribe"))
        bot.send_message(user_id, """
–í–æ–∑–º–æ–∂–Ω–æ –í–∞—Å –æ—Ç–≤–ª–µ–∫–ª–∏?ü§î

–í—ã —Ö–æ—Ç–µ–ª–∏ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ç–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª—É: "–ë—É—Ö–≥–∞–ª—Ç–µ—Ä –≤ –ì–µ—Ä–º–∞–Ω–∏–∏"

–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª –∏ –Ω–∞–∂–º–∏—Ç–µ: "–æ–ø–ª–∞—Ç–∏—Ç—å":‚¨áÔ∏è
        """, reply_markup=markup)

        # –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∏–∑ `pending_payments`
        del pending_payments[user_id]

# –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏
def remove_user_after_timeout(user_id, minutes):
    time.sleep(minutes * 60)
    cursor.execute('DELETE FROM users WHERE user_id = ?', (user_id,))
    conn.commit()

# –ó–∞–ø—É—Å–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
def remind_users(func=lambda call: call.data == "subscribe"):
    markup = telebot.types.InlineKeyboardMarkup()
    markup.add(telebot.types.InlineKeyboardButton("–û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="subscribe"))    
    while True:
        cursor.execute('SELECT user_id, expiration, phone_number FROM users')
        for user_id, expiration, phone_number in cursor.fetchall():
            if expiration:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ expiration –Ω–µ None
                try:
                    expiration_date = datetime.fromisoformat(expiration)
                    time_left = (expiration_date - datetime.now()).total_seconds()
                    days_left = (expiration_date - datetime.now()).days

                    if days_left == 3:
                        bot.send_message(user_id, """
–ß–µ—Ä–µ–∑ 3 –¥–Ω—è —É –≤–∞—Å –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è 
  –¥–æ—Å—Ç—É–ø –∫ —Ç–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª—É: 
   "–ë—É—Ö–≥–∞–ª—Ç–µ—Ä –≤ –ì–µ—Ä–º–∞–Ω–∏–∏"

         –ü—Ä–æ–¥–ª–∏—Ç—å‚¨áÔ∏è
                        """, reply_markup=markup)
                    elif days_left == 1:
                        bot.send_message(user_id, """
–ó–∞–≤—Ç—Ä–∞ —É –≤–∞—Å –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è –¥–æ—Å—Ç—É–ø 
 –∫ —Ç–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª—É: "–ë—É—Ö–≥–∞–ª—Ç–µ—Ä 
         –≤ –ì–µ—Ä–º–∞–Ω–∏–∏"

         –ü—Ä–æ–¥–ª–∏—Ç—å‚¨áÔ∏è
                        """, reply_markup=markup)
                    elif 0 < time_left <= 3600:
                        bot.send_message(user_id, """
–í–∞—à –¥–æ—Å—Ç—É–ø –∏—Å—Ç–µ–∫. üò±

–ü—Ä–æ–¥–ª–∏–º –ø–æ–¥–ø–∏—Å–∫—É?‚¨áÔ∏è
                        """, reply_markup=markup)
                        notify_admin_of_expiration(user_id, phone_number)
                    elif time_left <= 0:
                        bot.send_message(user_id, """
–í–∞—à –¥–æ—Å—Ç—É–ø –∏—Å—Ç–µ–∫. üò±

–ü—Ä–æ–¥–ª–∏–º –ø–æ–¥–ø–∏—Å–∫—É?‚¨áÔ∏è
                        """, reply_markup=markup)
                        notify_admin_of_expiration(user_id, phone_number)
                        try:
                            # –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–∞–Ω–∞–ª–∞
                            bot.kick_chat_member(CHANNEL_ID, user_id)
                            print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–µ–Ω –∏–∑ –∫–∞–Ω–∞–ª–∞ {CHANNEL_ID}")
                        except Exception as e:
                            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∏–∑ –∫–∞–Ω–∞–ª–∞: {e}")
                        cursor.execute('DELETE FROM users WHERE user_id = ?', (user_id,))
                        conn.commit()
                except ValueError:
                    print(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ expiration –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {expiration}")
            else:
                print(f"–ü—Ä–æ–ø—É—â–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}, —Ç–∞–∫ –∫–∞–∫ expiration –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        time.sleep(300)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç

def notify_admin_of_expiration(user_id, phone_number):
    user_info = bot.get_chat(user_id)
    username = user_info.username or f"user?id={user_id}"
    admin_message = f"–ü–æ–¥–ø–∏—Å–∫–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–æ–º–µ—Ä–æ–º +{phone_number} –∏ username @{username} –∏—Å—Ç–µ–∫–ª–∞."
    bot.send_message(admin_id, admin_id2, admin_message)

def run_bot():
    bot.remove_webhook()
    bot.polling(none_stop=True)

if __name__ == '__main__':
    threading.Thread(target=run_bot).start()
    threading.Thread(target=remind_users, daemon=True).start()
    app.run(port=5000)
